TestCase subclass: #ModeloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloTest methodsFor: 'tests' stamp: '5/9/2024 22:02'!test01ModeloCreaUnModeloNuevo	"Arrange"	| resultadoEsperado modelo resultadoObtenido |	resultadoEsperado := 10000.	modelo := Modelo deTipo: 'Nuevo'.		"Act"	resultadoObtenido := modelo medirKi: 10000.		"Assert"	self assert: resultadoEsperado equals: resultadoObtenido.! !!ModeloTest methodsFor: 'tests' stamp: '5/9/2024 22:02'!test02ModeloCreaUnModeloViejo	"Arrange"	| resultadoEsperado modelo resultadoObtenido |	resultadoEsperado := 9000.	modelo := Modelo deTipo: 'Viejo'.		"Act"	resultadoObtenido := modelo medirKi: 10000.		"Assert"	self assert: resultadoEsperado equals: resultadoObtenido.! !!ModeloTest methodsFor: 'tests' stamp: '5/9/2024 22:04'!test03ModeloLanzaUnaExcepcionCuandoRecibeUnModeloNoValido	"Arrange Act & Assert"	self should: [ Modelo deTipo: 'No Valido'. ] raise: ModeloNoValidoException.! !TestCase subclass: #TransformacionBaseTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TransformacionBaseTest methodsFor: 'tests' stamp: '4/18/2024 22:45'!test02TransformacionBaseRecibe2000Ydevuelve2000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 2000.	transformacionBase := Base new.		"Act"	kiObtenido := transformacionBase transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.! !!TransformacionBaseTest methodsFor: 'tests' stamp: '4/18/2024 22:45'!test01TransformacionBaseRecibe1000DeKiYDevuelve1000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 1000.	transformacionBase := Base new.		"Act"	kiObtenido := transformacionBase transformarKi: kiEsperado.		self assert: kiObtenido equals: kiEsperado.! !TestCase subclass: #PeleadorTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!PeleadorTest methodsFor: 'tests' stamp: '5/9/2024 14:23'!test01PeleadordevuelveTrueCuandoSeLePreguntaSiEsSuNombre	"Arrange"	| resultadoEsperado peleador resultadoObtenido |	resultadoEsperado := true.	peleador := Peleador conNombre: 'Goku' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: 1000.		"act"	resultadoObtenido := peleador es: 'Goku'.		"Assert"	self assert: resultadoEsperado equals: resultadoObtenido.! !!PeleadorTest methodsFor: 'tests' stamp: '5/9/2024 14:25'!test02Peleadordevuelve2000CuandoSeLePreguntaSuNivelDePelea	"Arrange"	| resultadoEsperado peleador resultadoObtenido |	resultadoEsperado := 2000.	peleador := Peleador conNombre: 'Goku' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: 1000.		"act"	resultadoObtenido := peleador obtenerNivelDePelea.		"Assert"	self assert: resultadoEsperado equals: resultadoObtenido.! !!PeleadorTest methodsFor: 'tests' stamp: '5/9/2024 14:26'!test03PeleadordevuelveSuNombreCuandoSeLePideObtenerNombre	"Arrange"	| resultadoEsperado peleador resultadoObtenido |	resultadoEsperado := 'Goku'.	peleador := Peleador conNombre: 'Goku' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: 1000.		"act"	resultadoObtenido := peleador obtenerNombre.		"Assert"	self assert: resultadoEsperado equals: resultadoObtenido.! !!PeleadorTest methodsFor: 'tests' stamp: '5/9/2024 22:12'!test04PeleadorLanzaUnErrorCuandoSeLoQuiereInstanciarConUnKiNegativo	"Arrange Act & Assert"	self should: [ Peleador conNombre: 'Goku' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: -1000. ] raise: KiNoValidoException.	! !TestCase subclass: #AlgoRastreadorZTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test01UnPeleadorConCiertoKiYTransformacionPoseeElSiguienteNivelDePelea	| kiEsperado kiObtenido algoRastreadorZ  |		"Arrange"		kiEsperado := 5000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"La lectura se hizo con un modelo viejo. El estado base no afecta el nivel de Ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test02UnPeleadorConUnKiMayorA9000RompeElRastreadorViejo		| kiEsperado kiObtenido algoRastreadorZ  |	"Arrange"	kiEsperado := 9000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 02:45'!test03UnPeleadorConUnKiMayorA9000EsLeidoCorrectamentePorElRastreadorNuevo| kiEsperado kiObtenido algoRastreadorZ  |	"Arrange"	kiEsperado := 10000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test04EntreUnPeleadorYOtroElRastreadorDetectaAlMasFuerte	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |	"Arrange"		peleadorMasFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test05UnPeleadorQueSeTransformaEnMonoGiganteAumentaConsiderablementeSuNivelDePelea	| kiEsperado kiObtenido algoRastreadorZ  |		"Arrange"		kiEsperado :=  (6000 * 10) asLargerPowerOfTwo.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El estado de mono gigante aumenta considerablemente el nivel de pelea"	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Vegeta'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test06EntreDosPeleadoresQueSuperan9000DePoderDePeleaElRastreadorViejoNoDetectaCorrectamente	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |	"Arrange"		peleadorMasFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test07EntreDosPeleadoresQueSuperan9000DePoderDePeleaElRastreadorNuevoDetectaCorrectamenteAlMasFuerte	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |		"Arrange"		peleadorMasFuerteEsperado := 'Vegeta'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test08EntreLosSiguientesPeleadoresElMasDebilEsElSiguiente	| peleadorDebilEsperado algoRastreadorZ  peleadorMasDebil |		"Arrange"		peleadorDebilEsperado := 'Napa'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Debil'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasDebil := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorDebilEsperado equals: peleadorMasDebil! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test09EntreLosSiguientesPeleadoresElMasFuerteEsElSiguiente	| peleadorFuerteEsperado algoRastreadorZ  peleadorMasFuerte |		"Arrange"		peleadorFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorFuerteEsperado equals: peleadorMasFuerte! !TestCase subclass: #AlgoRastreadorZTestExcepciones	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgoRastreadorZTestExcepciones methodsFor: 'tests' stamp: '5/9/2024 20:09'!test01RastreadorRecibeUnCriterioNoValido	| algoRastreadorZ |	"Arrange Act & Assert"			algoRastreadorZ  := self should: [algoRastreadorZ := AlgoRastreadorZ conCriterioMas: ''.] raise: CriterioNoValidoException.! !!AlgoRastreadorZTestExcepciones methodsFor: 'tests' stamp: '4/19/2024 01:33'!test02RastreadorRecibeUnPeleadorNoRegistrado	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"La lectura se hizo con un modelo viejo. El estado base no afecta el nivel de Ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.		self should: [algoRastreadorZ nivelDePeleaDe: 'peleadorNoExistente' ] raise: PeleadorNoRegistradoException.! !!AlgoRastreadorZTestExcepciones methodsFor: 'tests' stamp: '5/9/2024 20:47'!test03RastreadorRecibeUnModeloNoValido	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.			self should: [algoRastreadorZ registrarRastreoConModelo: 'ModeloNoExistente' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.] raise: ModeloNoValidoException.! !!AlgoRastreadorZTestExcepciones methodsFor: 'tests' stamp: '5/9/2024 20:47'!test04RastreadorRecibeUnaTransformacionNoValida	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		self should: [algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'TransformacionNoValida'.] raise: TransformacionNoValidaException.! !!AlgoRastreadorZTestExcepciones methodsFor: 'tests' stamp: '5/9/2024 20:49'!test05RastreadorRecibeUnKiNegativo	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		self should: [algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: -1000 yTransformacion: 'Base'.] raise: KiNoValidoException.! !TestCase subclass: #TransformacionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TransformacionTest methodsFor: 'tests' stamp: '5/8/2024 23:48'!test01TransformacionCreaUnaTransformacinBase	|  transformacionObtenida  kiEsperado kiObtenido  |	"Arrange"	"Act"	kiEsperado := 1000.	transformacionObtenida := Transformacion deTipo: 'Base'.	kiObtenido := transformacionObtenida transformarKi: 1000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!TransformacionTest methodsFor: 'tests' stamp: '5/8/2024 23:48'!test02TransformacionCreaUnaTransformacionKaioKen	|  transformacionObtenida  kiEsperado kiObtenido  |	"Arrange"	"Act"	kiEsperado := 2000.	transformacionObtenida := Transformacion deTipo: 'Kaio-Ken'.	kiObtenido := transformacionObtenida transformarKi: 1000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!TransformacionTest methodsFor: 'tests' stamp: '5/9/2024 22:07'!test04TransformacionLanzaUnaExcepcionCuandoRecibeUnaTranformacionNoValida	"Arrange Act & Assert"	self should: [Transformacion deTipo: 'No Valido'.] raise: TransformacionNoValidaException .! !!TransformacionTest methodsFor: 'tests' stamp: '5/9/2024 22:06'!test03TransformacionCreaUnaTransformacionMonoGigante	|  transformacionObtenida  kiEsperado kiObtenido  |	"Arrange"	"Act"	kiEsperado := (6000 * 10) asLargerPowerOfTwo.	transformacionObtenida := Transformacion deTipo: 'Mono Gigante'.	kiObtenido := transformacionObtenida transformarKi: 6000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !TestCase subclass: #CriterioFuerteTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioFuerteTest methodsFor: 'tests' stamp: '5/8/2024 12:34'!test01CriterioFuerteBuscaElPeleadorMasFuerte	| peleador1 peleador2 peleador3 peleadores criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Goku'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: MonoGigante new yKiBase: 1000.	peleador2 := Peleador conNombre: 'Napa' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: 2000.	peleador3 := Peleador conNombre: 'Vegeta' conModelo: ModeloNuevo new transformacion: Base new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	criterio := CriterioFuerte new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDePeleadores: peleadores.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioFuerteTest methodsFor: 'tests' stamp: '5/8/2024 12:37'!test02CriterioFuerteBuscaElPeleadorMasFuerteQueAparecePrimero	| peleador1 peleador2 peleador3 peleadores criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Vegeta'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Vegeta' conModelo: ModeloViejo new transformacion: MonoGigante new yKiBase: 2000.	peleador2 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: KaioKen new yKiBase: 5000.	peleador3 := Peleador conNombre: 'Napa' conModelo: ModeloNuevo new transformacion: Base new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	criterio := CriterioFuerte new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDePeleadores: peleadores.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioFuerteTest methodsFor: 'tests' stamp: '5/8/2024 12:37'!test03CriterioFuerteBuscaElPeleadorMasFuerteEnListaVacia	| peleadores criterio |	"Arrange"	peleadores := OrderedCollection new.	criterio := CriterioFuerte new.		"Act & Assert"	self should: [criterio buscarPeleadorEnListaDePeleadores: peleadores] raise: PeleadorNoRegistradoException.! !TestCase subclass: #CriterioDebilTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioDebilTest methodsFor: 'tests' stamp: '5/8/2024 10:53'!test01CriterioDebilBuscaElPeleadorMasDebil	| peleador1 peleador2 peleador3 peleadores criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Napa'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: MonoGigante new yKiBase: 1000.	peleador2 := Peleador conNombre: 'Napa' conModelo: ModeloNuevo new transformacion: KaioKen new yKiBase: 2000.	peleador3 := Peleador conNombre: 'Vegeta' conModelo: ModeloNuevo new transformacion: Base new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	criterio := CriterioDebil new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDePeleadores: peleadores.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioDebilTest methodsFor: 'tests' stamp: '5/8/2024 10:57'!test02CriterioDebilBuscaElPeleadorMasDebil	| peleador1 peleador2 peleador3 peleadores criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Napa'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: KaioKen new yKiBase: 6000.	peleador2 := Peleador conNombre: 'Napa' conModelo: ModeloNuevo new transformacion: Base new yKiBase: 2000.	peleador3 := Peleador conNombre: 'Vegeta' conModelo: ModeloNuevo new transformacion: MonoGigante new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	criterio := CriterioDebil new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDePeleadores: peleadores.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioDebilTest methodsFor: 'tests' stamp: '5/8/2024 12:32'!test03CriterioDebilBuscaElPeleadorMasDebilEnListaVacia	| peleadores criterio |	"Arrange"	peleadores := OrderedCollection new.	criterio := CriterioDebil new.		"Act & Assert"	self should: [criterio buscarPeleadorEnListaDePeleadores: peleadores] raise: PeleadorNoRegistradoException.! !TestCase subclass: #TransformacionKaioKenTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TransformacionKaioKenTest methodsFor: 'tests' stamp: '4/18/2024 22:47'!test01TransformacionKaioKenRecibeUnKiDe1000YDevuelve2000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 2000.	transformacionBase := KaioKen new.		"Act"	kiObtenido := transformacionBase transformarKi: 1000.		self assert: kiObtenido equals: kiEsperado.				! !!TransformacionKaioKenTest methodsFor: 'tests' stamp: '4/18/2024 22:47'!test02TransformacionKaioKenRecibeUnKiDe2000YDevuelve4000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 4000.	transformacionBase := KaioKen new.		"Act"	kiObtenido := transformacionBase transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.				! !TestCase subclass: #ModeloNuevoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloNuevoTest methodsFor: 'tests' stamp: '5/7/2024 23:56'!test01ModeloNuevoRastreaUnPeleadorConKi10000DevuelveUnKiDe10000	| modelo kiEsperado kiObtenido|	"Arrange"		modelo := ModeloNuevo new.	kiEsperado := 10000.	"Act"	kiObtenido := modelo medirKi: 10000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!ModeloNuevoTest methodsFor: 'tests' stamp: '5/7/2024 23:57'!test02ModeloNuevoRastreaUnPeleadorConKi8000DevuelveUnKiDe8000	| modelo kiEsperado kiObtenido|	"Arrange"		modelo := ModeloNuevo new.	kiEsperado := 5000.	"Act"	kiObtenido := modelo medirKi: 5000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !TestCase subclass: #CriterioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioTest methodsFor: 'tests' stamp: '5/9/2024 00:00'!test01CriterioCreaUnCriterioFuerte	|criterioObtenido peleadorEsperado peleadores peleador1 peleador2 peleador3 peleadorObtenido |	"Arrange"		peleadorEsperado := 'Vegeta'.	criterioObtenido := Criterio deTipo: 'Fuerte'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Vegeta' conModelo: ModeloNuevo new transformacion: MonoGigante new yKiBase: 2000.	peleador2 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: KaioKen new yKiBase: 5000.	peleador3 := Peleador conNombre: 'Napa' conModelo: ModeloViejo new transformacion: Base new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	"Act"	peleadorObtenido := criterioObtenido buscarPeleadorEnListaDePeleadores: peleadores.				"Assert"	self assert: peleadorEsperado equals: peleadorObtenido.! !!CriterioTest methodsFor: 'tests' stamp: '5/9/2024 00:00'!test02CriterioCreaUnCriterioDebil	|criterioObtenido peleadorEsperado peleadores peleador1 peleador2 peleador3 peleadorObtenido |	"Arrange"		peleadorEsperado := 'Napa'.	criterioObtenido := Criterio deTipo: 'Debil'.	peleadores := OrderedCollection new.	peleador1 := Peleador conNombre: 'Vegeta' conModelo: ModeloNuevo new transformacion: MonoGigante new yKiBase: 2000.	peleador2 := Peleador conNombre: 'Goku' conModelo: ModeloViejo new transformacion: KaioKen new yKiBase: 5000.	peleador3 := Peleador conNombre: 'Napa' conModelo: ModeloViejo new transformacion: Base new yKiBase: 4000.	peleadores add: peleador1.	peleadores add: peleador2.	peleadores add: peleador3.	"Act"	peleadorObtenido := criterioObtenido buscarPeleadorEnListaDePeleadores: peleadores.				"Assert"	self assert: peleadorEsperado equals: peleadorObtenido.! !!CriterioTest methodsFor: 'tests' stamp: '5/9/2024 22:06'!test03CriterioLanzaUnaExcepcionCuandoRecibeUnCriterioNoValido	"Arrange Act & Assert"	self should: [Criterio deTipo: 'No Valido'.] raise: CriterioNoValidoException.! !TestCase subclass: #TransformacionMonoGiganteTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TransformacionMonoGiganteTest methodsFor: 'tests' stamp: '4/19/2024 04:12'!test01TransformacionMonoGiganteRecibeUnKiDe1000YDevuelve16384	"Arrange"	|transformacionMonoGigante kiEsperado kiObtenido|	kiEsperado := (1000 * 10) asLargerPowerOfTwo. 	transformacionMonoGigante := MonoGigante new.		"Act"	kiObtenido := transformacionMonoGigante transformarKi: 1000.		self assert: kiObtenido equals: kiEsperado.				! !!TransformacionMonoGiganteTest methodsFor: 'tests' stamp: '4/18/2024 22:50'!test02TransformacionMonoGiganteRecibeUnKiDe2000YDevuelve32768	"Arrange"	|transformacionMonoGigante kiEsperado kiObtenido|	kiEsperado := (2000 * 10) asLargerPowerOfTwo. 	transformacionMonoGigante := MonoGigante new.		"Act"	kiObtenido := transformacionMonoGigante transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.				! !TestCase subclass: #ModeloViejoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloViejoTest methodsFor: 'tests' stamp: '5/8/2024 00:00'!test01ModeloViejoRastreaUnPeleadorConKi4000DevuelveUnKiDe4000	| modelo kiEsperado kiObtenido|	"Arrange"		modelo := ModeloViejo new.	kiEsperado := 4000.	"Act"	kiObtenido := modelo medirKi: 4000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!ModeloViejoTest methodsFor: 'tests' stamp: '5/8/2024 00:01'!test02ModeloViejoRastreaUnPeleadorConKi10000DevuelveUnKiDe9000	| modelo kiEsperado kiObtenido|	"Arrange"		modelo := ModeloViejo new.	kiEsperado := 9000.	"Act"	kiObtenido := modelo medirKi: 10000.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !