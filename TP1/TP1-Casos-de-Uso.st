TestCase subclass: #ModeloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloTest methodsFor: 'tests' stamp: '4/19/2024 02:16'!test01ModeloCreaUnaInstanciaDeModeloNuevo	|criterioObtenido criterioEsperado|	"Arrange"	 criterioEsperado := ModeloNuevo.		"Act"	criterioObtenido := Modelo crearModelo: 'Nuevo'.	"Assert"	self assert: (criterioObtenido isMemberOf: criterioEsperado).! !!ModeloTest methodsFor: 'tests' stamp: '4/19/2024 02:16'!test02ModeloCreaUnaInstanciaDeModeloNuevo	|criterioObtenido criterioEsperado|	"Arrange"	 criterioEsperado := ModeloViejo.		"Act"	criterioObtenido := Modelo crearModelo: 'Viejo'.	"Assert"	self assert: (criterioObtenido isMemberOf: criterioEsperado).! !!ModeloTest methodsFor: 'tests' stamp: '4/19/2024 02:19'!test03ModeloLanzaUnaExcepcionModeloNoValidoException	|criterioObtenido criterioEsperado|	"Arrange"	 criterioEsperado := ModeloViejo.		"Act"	criterioObtenido := Modelo crearModelo: 'Viejo'.	"Assert"	self should: [Modelo crearModelo: 'ModeloNoValido'. ]  raise: ModeloNoValidoException.! !TestCase subclass: #TranformacionBaseTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TranformacionBaseTest methodsFor: 'tests' stamp: '4/18/2024 22:45'!test02TransformacionBaseRecibe2000Ydevuelve2000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 2000.	transformacionBase := Base new.		"Act"	kiObtenido := transformacionBase transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.! !!TranformacionBaseTest methodsFor: 'tests' stamp: '4/18/2024 22:45'!test01TransformacionBaseRecibe1000DeKiYDevuelve1000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 1000.	transformacionBase := Base new.		"Act"	kiObtenido := transformacionBase transformarKi: kiEsperado.		self assert: kiObtenido equals: kiEsperado.! !!TranformacionBaseTest methodsFor: 'tests' stamp: '4/19/2024 04:32'!test03TransformacionBaseRecibeUnKiNegativoYLanzaUnaExcepcion	"Arrange"	|transformacionBase |	transformacionBase := Base new.		"Act & Assert"		self should: [transformacionBase transformarKi: -1000. ]  raise: KiNoValidoException.	! !TestCase subclass: #AlgoRastreadorZTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test01UnPeleadorConCiertoKiYTransformacionPoseeElSiguienteNivelDePelea	| kiEsperado kiObtenido algoRastreadorZ  |		"Arrange"		kiEsperado := 5000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"La lectura se hizo con un modelo viejo. El estado base no afecta el nivel de Ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test02UnPeleadorConUnKiMayorA9000RompeElRastreadorViejo		| kiEsperado kiObtenido algoRastreadorZ  |	"Arrange"	kiEsperado := 9000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 02:45'!test03UnPeleadorConUnKiMayorA9000EsLeidoCorrectamentePorElRastreadorNuevo| kiEsperado kiObtenido algoRastreadorZ  |	"Arrange"	kiEsperado := 10000.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El kaio-ken multiplica por 2 el nivel de ki"	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Goku'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test04EntreUnPeleadorYOtroElRastreadorDetectaAlMasFuerte	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |	"Arrange"		peleadorMasFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test05UnPeleadorQueSeTransformaEnMonoGiganteAumentaConsiderablementeSuNivelDePelea	| kiEsperado kiObtenido algoRastreadorZ  |		"Arrange"		kiEsperado :=  (6000 * 10) asLargerPowerOfTwo.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"El estado de mono gigante aumenta considerablemente el nivel de pelea"	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	kiObtenido := algoRastreadorZ nivelDePeleaDe: 'Vegeta'.		"Assert"	self assert: kiEsperado equals: kiObtenido! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test06EntreDosPeleadoresQueSuperan9000DePoderDePeleaElRastreadorViejoNoDetectaCorrectamente	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |	"Arrange"		peleadorMasFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.		algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test07EntreDosPeleadoresQueSuperan9000DePoderDePeleaElRastreadorNuevoDetectaCorrectamenteAlMasFuerte	| peleadorMasFuerteEsperado algoRastreadorZ  peleadorMasFuerte |		"Arrange"		peleadorMasFuerteEsperado := 'Vegeta'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorMasFuerteEsperado equals: peleadorMasFuerte! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test08EntreLosSiguientesPeleadoresElMasDebilEsElSiguiente	| peleadorDebilEsperado algoRastreadorZ  peleadorMasDebil |		"Arrange"		peleadorDebilEsperado := 'Napa'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Debil'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasDebil := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorDebilEsperado equals: peleadorMasDebil! !!AlgoRastreadorZTest methodsFor: 'tests' stamp: '4/19/2024 01:33'!test09EntreLosSiguientesPeleadoresElMasFuerteEsElSiguiente	| peleadorFuerteEsperado algoRastreadorZ  peleadorMasFuerte |		"Arrange"		peleadorFuerteEsperado := 'Goku'.	algoRastreadorZ  := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		algoRastreadorZ registrarRastreoConModelo: 'Nuevo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Kaio-Ken'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Vegeta' KiBase: 6000 yTransformacion: 'Mono Gigante'.	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Napa' KiBase: 4000 yTransformacion: 'Base'.		"Act"	peleadorMasFuerte := algoRastreadorZ obtenerPeleadorSegunCriterio.		"Assert"	self assert: peleadorFuerteEsperado equals: peleadorMasFuerte! !TestCase subclass: #AlgoRastreadorZTestPropios	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgoRastreadorZTestPropios methodsFor: 'tests' stamp: '4/19/2024 02:09'!test01RastreadorRecibeUnCriterioNoValido	| algoRastreadorZ |		"Arrange Act & Assert"		algoRastreadorZ  := self should: [AlgoRastreadorZ conCriterioMas: ''] raise: CriterioNoValidoException.! !!AlgoRastreadorZTestPropios methodsFor: 'tests' stamp: '4/19/2024 01:33'!test02RastreadorRecibeUnPeleadorNoRegistrado	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.		"La lectura se hizo con un modelo viejo. El estado base no afecta el nivel de Ki"	algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'.		self should: [algoRastreadorZ nivelDePeleaDe: 'peleadorNoExistente' ] raise: PeleadorNoRegistradoException.! !!AlgoRastreadorZTestPropios methodsFor: 'tests' stamp: '4/19/2024 01:33'!test03RastreadorRecibeUnModeloNoValido	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.			self should: [algoRastreadorZ registrarRastreoConModelo: 'ModeloNoExistente' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'Base'. ] raise: ModeloNoValidoException.! !!AlgoRastreadorZTestPropios methodsFor: 'tests' stamp: '4/19/2024 01:33'!test04RastreadorRecibeUnaTransformacionNoValida	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.			self should: [algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: 'TransformacionNoValida'. ] raise: TransformacionNoValidaException.! !!AlgoRastreadorZTestPropios methodsFor: 'tests' stamp: '4/19/2024 01:33'!test05RastreadorRecibeUnKiNegativo	| algoRastreadorZ |		"Arrange"		algoRastreadorZ := AlgoRastreadorZ conCriterioMas: 'Fuerte'.			self should: [algoRastreadorZ registrarRastreoConModelo: 'Viejo' delPeleadorConNombre: 'Goku' KiBase: -1000 yTransformacion: 'Base'. ] raise: KiNoValidoException.! !TestCase subclass: #TransformacionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TransformacionTest methodsFor: 'tests' stamp: '4/19/2024 02:22'!test04TransformacionLanzaUnaExcepcionTransformacionNoValidaException	"Arrange"	"Act"	"Assert"	self should: [Transformacion crearTransformacion: 'TransformacionNoValida'. ]  raise: TransformacionNoValidaException.! !!TransformacionTest methodsFor: 'tests' stamp: '4/19/2024 02:25'!test01TransformacionCreaUnaTransformacinBase	|  transformacionObtenida  transformacion |	"Arrange"	"Act"	transformacionObtenida := transformacion := Transformacion crearTransformacion: 'Base'.	"Assert"	self assert: (transformacionObtenida isMemberOf: Base).! !!TransformacionTest methodsFor: 'tests' stamp: '4/19/2024 02:25'!test02TransformacionCreaUnaTransformacinKaioKen	|  transformacionObtenida  transformacion |	"Arrange"	"Act"	transformacionObtenida := transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	"Assert"	self assert: (transformacionObtenida isMemberOf: KaioKen).! !!TransformacionTest methodsFor: 'tests' stamp: '4/19/2024 02:26'!test03TransformacionCreaUnaTransformacinMonoGigante	|  transformacionObtenida  transformacion |	"Arrange"	"Act"	transformacionObtenida := transformacion := Transformacion crearTransformacion: 'Mono Gigante'.	"Assert"	self assert: (transformacionObtenida isMemberOf: MonoGigante).! !TestCase subclass: #CriterioFuerteTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioFuerteTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test01CriterioFuerteBuscaElPeleadorMasFuerte	|rastreo1 rastreo2 rastreo3 historial criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Vegeta'.	historial := OrderedCollection new.	rastreo1 := Rastreo conNombre: 'Goku' yKi: 5000.	rastreo2 := Rastreo conNombre: 'Napa' yKi: 8000.	rastreo3 := Rastreo conNombre: 'Vegeta' yKi: 10000.	historial add: rastreo1.	historial add: rastreo2.	historial add: rastreo3.	criterio := CriterioFuerte new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDeRastreos: historial.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioFuerteTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test02CriterioFuerteBuscaElPeleadorMasFuerte	|rastreo1 rastreo2 rastreo3 historial criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Goku'.	historial := OrderedCollection new.	rastreo1 := Rastreo conNombre: 'Goku' yKi: 10000.	rastreo2 := Rastreo conNombre: 'Napa' yKi: 8000.	rastreo3 := Rastreo conNombre: 'Vegeta' yKi: 10000.	historial add: rastreo1.	historial add: rastreo2.	historial add: rastreo3.	criterio := CriterioFuerte new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDeRastreos: historial.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioFuerteTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test03CriterioDebilBuscaElPeleadorMasDebilEnListaVacia	| historial criterio peleadorEsperado|	"Arrange"	peleadorEsperado := 'Napa'.	historial := OrderedCollection new.	criterio := CriterioFuerte new.		"Act & Assert"	self should: [criterio buscarPeleadorEnListaDeRastreos: historial.] raise: PeleadorNoRegistradoException.	! !TestCase subclass: #CriterioDebilTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioDebilTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test01CriterioDebilBuscaElPeleadorMasDebil	|rastreo1 rastreo2 rastreo3 historial criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Napa'.	historial := OrderedCollection new.	rastreo1 := Rastreo conNombre: 'Goku' yKi: 5000.	rastreo2 := Rastreo conNombre: 'Napa' yKi: 2000.	rastreo3 := Rastreo conNombre: 'Vegeta' yKi: 10000.	historial add: rastreo1.	historial add: rastreo2.	historial add: rastreo3.	criterio := CriterioDebil new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDeRastreos: historial.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioDebilTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test02CriterioDebilBuscaElPeleadorMasDebil	|rastreo1 rastreo2 rastreo3 historial criterio peleadorObtenido peleadorEsperado|	"Arrange"	peleadorEsperado := 'Vegeta'.	historial := OrderedCollection new.	rastreo1 := Rastreo conNombre: 'Napa' yKi: 5000.	rastreo2 := Rastreo conNombre: 'Vegeta' yKi: 2000.	rastreo3 := Rastreo conNombre: 'Goku' yKi: 2000.	historial add: rastreo1.	historial add: rastreo2.	historial add: rastreo3.	criterio := CriterioDebil new.		"Act"	peleadorObtenido := criterio buscarPeleadorEnListaDeRastreos: historial.		"Assert"	self assert: peleadorObtenido equals: peleadorEsperado.! !!CriterioDebilTest methodsFor: 'tests' stamp: '4/19/2024 07:48'!test03CriterioDebilBuscaElPeleadorMasDebilEnListaVacia	| historial criterio peleadorEsperado|	"Arrange"	peleadorEsperado := 'Napa'.	historial := OrderedCollection new.	criterio := CriterioDebil new.		"Act & Assert"	self should: [criterio buscarPeleadorEnListaDeRastreos: historial.] raise: PeleadorNoRegistradoException.	! !TestCase subclass: #RastreoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!RastreoTest methodsFor: 'as yet unclassified' stamp: '4/19/2024 01:54'!test01RastreoSeLePreguntaSiEsSuNombre	| rastreo resultadoEsperado resultadoObtenido|	"Arrange"	resultadoEsperado := true.	rastreo := Rastreo conNombre: 'Goku' yKi: 5000.	"Act"	resultadoObtenido := rastreo es: 'Goku'.	"Assert"	self assert: resultadoObtenido equals: resultadoEsperado! !!RastreoTest methodsFor: 'as yet unclassified' stamp: '4/19/2024 01:55'!test02RastreoSeLePreguntaSiEsUnNombreQueNoLeCorresponde	| rastreo resultadoEsperado resultadoObtenido|	"Arrange"	resultadoEsperado := false.	rastreo := Rastreo conNombre: 'Vegeta' yKi: 5000.	"Act"	resultadoObtenido := rastreo es: 'Goku'.	"Assert"	self assert: resultadoObtenido equals: resultadoEsperado! !TestCase subclass: #TranformacionKaioKenTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TranformacionKaioKenTest methodsFor: 'tests' stamp: '4/18/2024 22:47'!test01TransformacionKaioKenRecibeUnKiDe1000YDevuelve2000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 2000.	transformacionBase := KaioKen new.		"Act"	kiObtenido := transformacionBase transformarKi: 1000.		self assert: kiObtenido equals: kiEsperado.				! !!TranformacionKaioKenTest methodsFor: 'tests' stamp: '4/18/2024 22:47'!test02TransformacionKaioKenRecibeUnKiDe2000YDevuelve4000	"Arrange"	|transformacionBase kiEsperado kiObtenido|	kiEsperado := 4000.	transformacionBase := KaioKen new.		"Act"	kiObtenido := transformacionBase transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.				! !!TranformacionKaioKenTest methodsFor: 'tests' stamp: '4/19/2024 04:33'!test03TransformacionKaioKenRecibeUnKiNegativoYLanzaUnaExcepcion	"Arrange"	|transformacionKaioKen |	transformacionKaioKen := KaioKen new.		"Act & Assert"		self should: [transformacionKaioKen transformarKi: -1000. ]  raise: KiNoValidoException.	! !TestCase subclass: #ModeloNuevoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloNuevoTest methodsFor: 'tests' stamp: '4/18/2024 23:52'!test01ModeloNuevoRastreaUnPeleadorConKi8000DevuelveUnObjetoDeClaseRastreo	| modelo rastreoObtenido transformacion |	"Arrange"	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	modelo := ModeloNuevo new.		"Act"	rastreoObtenido := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 4000 yTransformacion: transformacion.	"Assert"	self assert: (rastreoObtenido isMemberOf: Rastreo).! !!ModeloNuevoTest methodsFor: 'tests' stamp: '4/18/2024 23:52'!test02ModeloNuevoRastreaUnPeleadorConKi10000DevuelveUnKiDe10000	| modelo rastreoObtenido transformacion kiObtenido kiEsperado |	"Arrange"	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	modelo := ModeloNuevo new.	kiEsperado := 10000.	"Act"	rastreoObtenido := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: transformacion.	kiObtenido := rastreoObtenido obtenerNivelDePelea.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!ModeloNuevoTest methodsFor: 'tests' stamp: '4/19/2024 08:27'!test03ModeloNuevoRastreaUnPeleadorConKi8000DevuelveUnKiDe8000	| modelo rastreoObtenido transformacion kiObtenido kiEsperado |	"Arrange"	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	modelo := ModeloNuevo new.	kiEsperado := 8000.	"Act"	rastreoObtenido := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 4000 yTransformacion: transformacion.	kiObtenido := rastreoObtenido obtenerNivelDePelea.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !TestCase subclass: #CriterioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioTest methodsFor: 'tests' stamp: '4/19/2024 02:07'!test01CriterioCreaUnCriterioFuerte	|criterioObtenido criterioEsperado|	"Arrange"	 criterioEsperado := CriterioFuerte.		"Act"	criterioObtenido := Criterio crearCriterioMas: 'Fuerte'.	"Assert"	self assert: (criterioObtenido isMemberOf: criterioEsperado).! !!CriterioTest methodsFor: 'tests' stamp: '4/19/2024 02:08'!test02CriterioCreaUnCriterioDebil	|criterioObtenido criterioEsperado|	"Arrange"	 criterioEsperado := CriterioDebil.		"Act"	criterioObtenido := Criterio crearCriterioMas: 'Debil'.	"Assert"	self assert: (criterioObtenido isMemberOf: criterioEsperado).! !!CriterioTest methodsFor: 'tests' stamp: '4/19/2024 02:11'!test03CriterioLanzaLaExcepcionCriterioNoValidoException	|criterioObtenido valorEsperado|	"Arrange"	valorEsperado := CriterioNoValidoException.		"Act"	"Assert"	self should: [ criterioObtenido := Criterio crearCriterioMas: 'CriterioNoValido'. ]  raise: CriterioNoValidoException.! !TestCase subclass: #TranformacionMonoGiganteTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TranformacionMonoGiganteTest methodsFor: 'tests' stamp: '4/19/2024 04:12'!test01TransformacionMonoGiganteRecibeUnKiDe1000YDevuelve16384	"Arrange"	|transformacionMonoGigante kiEsperado kiObtenido|	kiEsperado := (1000 * 10) asLargerPowerOfTwo. 	transformacionMonoGigante := MonoGigante new.		"Act"	kiObtenido := transformacionMonoGigante transformarKi: 1000.		self assert: kiObtenido equals: kiEsperado.				! !!TranformacionMonoGiganteTest methodsFor: 'tests' stamp: '4/18/2024 22:50'!test02TransformacionMonoGiganteRecibeUnKiDe2000YDevuelve32768	"Arrange"	|transformacionMonoGigante kiEsperado kiObtenido|	kiEsperado := (2000 * 10) asLargerPowerOfTwo. 	transformacionMonoGigante := MonoGigante new.		"Act"	kiObtenido := transformacionMonoGigante transformarKi: 2000.		self assert: kiObtenido equals: kiEsperado.				! !!TranformacionMonoGiganteTest methodsFor: 'tests' stamp: '4/19/2024 04:33'!test03TransformacionBaseRecibeUnKiNegativoYLanzaUnaExcepcion	"Arrange"	|transformacionMonoGigante |	transformacionMonoGigante := MonoGigante new.		"Act & Assert"		self should: [transformacionMonoGigante transformarKi: -1000. ]  raise: KiNoValidoException.	! !TestCase subclass: #ModeloViejoTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!ModeloViejoTest methodsFor: 'tests' stamp: '4/18/2024 23:47'!test03ModeloViejoRastreaUnPeleadorConKi10000DevuelveUnKiDe9000	| modelo kiEsperado rastreo kiObtenido transformacion |	"Arrange"	kiEsperado := 9000.	modelo := ModeloViejo new.	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	"Act"	rastreo := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 5000 yTransformacion: transformacion.	kiObtenido := rastreo obtenerNivelDePelea.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!ModeloViejoTest methodsFor: 'tests' stamp: '4/18/2024 23:47'!test02ModeloViejoRastreaUnPeleadorConKi4000DevuelveUnKiDe8000	| modelo kiEsperado rastreo kiObtenido transformacion |	"Arrange"	kiEsperado := 8000.	modelo := ModeloViejo new.	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	"Act"	rastreo := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 4000 yTransformacion: transformacion.	kiObtenido := rastreo obtenerNivelDePelea.	"Assert"	self assert: kiObtenido equals: kiEsperado.! !!ModeloViejoTest methodsFor: 'tests' stamp: '4/18/2024 23:49'!test01ModeloViejoRastreaUnPeleadorConKi8000DevuelveUnObjetoDeClaseRastreo	| modelo rastreoObtenido transformacion |	"Arrange"	transformacion := Transformacion crearTransformacion: 'Kaio-Ken'.	modelo := ModeloViejo new.		"Act"	rastreoObtenido := modelo rastrearPeleadorConNombre: 'Goku' KiBase: 4000 yTransformacion: transformacion.	"Assert"	self assert: (rastreoObtenido isMemberOf: Rastreo).! !